version: '3.8'

services:
  # ============================================================================
  # DATABASES
  # ============================================================================

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: biomedical-timescaledb
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-biomedical_platform}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-biomedical_secure_pass}
    ports:
      - "5432:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - biomedical-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: biomedical-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-biomedical_redis_pass} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - biomedical-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # MEDICAL IMAGING - ORTHANC PACS
  # ============================================================================

  orthanc:
    image: jodogne/orthanc-plugins:latest
    container_name: biomedical-orthanc
    environment:
      ORTHANC_USERNAME: ${ORTHANC_USERNAME:-orthanc}
      ORTHANC_PASSWORD: ${ORTHANC_PASSWORD:-orthanc_pass}
      ORTHANC_AE_TITLE: ${DICOM_AE_TITLE:-BIOMEDICAL_AI}
    ports:
      - "8042:8042"  # Web interface
      - "4242:4242"  # DICOM protocol
    volumes:
      - orthanc_data:/var/lib/orthanc/db
      - ./infrastructure/docker/orthanc/orthanc.json:/etc/orthanc/orthanc.json
    networks:
      - biomedical-network
    restart: unless-stopped
    depends_on:
      - timescaledb

  # ============================================================================
  # MESSAGE QUEUE
  # ============================================================================

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: biomedical-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - biomedical-network
    depends_on:
      - zookeeper
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: biomedical-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - biomedical-network
    restart: unless-stopped

  # ============================================================================
  # MICROSERVICES
  # ============================================================================

  ai-diagnostics-backend:
    build:
      context: ./ai-diagnostics/backend
      dockerfile: Dockerfile
    container_name: biomedical-ai-diagnostics-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT_AI_DIAGNOSTICS:-5001}
      DATABASE_HOST: timescaledb
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BROKER: kafka:9092
    ports:
      - "5001:5001"
    volumes:
      - ./ai-diagnostics/backend:/app
      - /app/node_modules
    networks:
      - biomedical-network
    depends_on:
      - timescaledb
      - redis
      - kafka
    restart: unless-stopped

  medical-imaging-backend:
    build:
      context: ./medical-imaging-ai/backend
      dockerfile: Dockerfile
    container_name: biomedical-imaging-backend
    environment:
      PYTHONUNBUFFERED: 1
      PORT: ${PORT_MEDICAL_IMAGING:-5002}
      DATABASE_HOST: timescaledb
      DATABASE_PORT: 5432
      ORTHANC_URL: http://orthanc:8042
      ORTHANC_USERNAME: ${ORTHANC_USERNAME}
      ORTHANC_PASSWORD: ${ORTHANC_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "5002:5002"
    volumes:
      - ./medical-imaging-ai/backend:/app
      - imaging_models:/models
    networks:
      - biomedical-network
    depends_on:
      - timescaledb
      - redis
      - orthanc
    restart: unless-stopped

  biosensing-backend:
    build:
      context: ./biosensing/backend
      dockerfile: Dockerfile
    container_name: biomedical-biosensing-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT_BIOSENSING:-5003}
      DATABASE_HOST: timescaledb
      REDIS_HOST: redis
      KAFKA_BROKER: kafka:9092
    ports:
      - "5003:5003"
    volumes:
      - ./biosensing/backend:/app
      - /app/node_modules
    networks:
      - biomedical-network
    depends_on:
      - timescaledb
      - redis
      - kafka
    restart: unless-stopped

  hipaa-compliance-backend:
    build:
      context: ./hipaa-compliance/backend
      dockerfile: Dockerfile
    container_name: biomedical-hipaa-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT_HIPAA_COMPLIANCE:-5004}
      DATABASE_HOST: timescaledb
      REDIS_HOST: redis
    ports:
      - "5004:5004"
    volumes:
      - ./hipaa-compliance/backend:/app
      - /app/node_modules
    networks:
      - biomedical-network
    depends_on:
      - timescaledb
      - redis
    restart: unless-stopped

  biotensor-labs-backend:
    build:
      context: ./biotensor-labs/backend
      dockerfile: Dockerfile
    container_name: biomedical-biotensor-backend
    environment:
      PYTHONUNBUFFERED: 1
      PORT: ${PORT_BIOTENSOR_LABS:-5005}
      DATABASE_HOST: timescaledb
      REDIS_HOST: redis
    ports:
      - "5005:5005"
    volumes:
      - ./biotensor-labs/backend:/app
      - ml_experiments:/experiments
      - ml_models:/models
    networks:
      - biomedical-network
    depends_on:
      - timescaledb
      - redis
    restart: unless-stopped

  mynx-natalcare-backend:
    build:
      context: ./mynx-natalcare/backend
      dockerfile: Dockerfile
    container_name: biomedical-mynx-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT_MYNX_NATALCARE:-5006}
      DATABASE_HOST: timescaledb
      REDIS_HOST: redis
      KAFKA_BROKER: kafka:9092
    ports:
      - "5006:5006"
    volumes:
      - ./mynx-natalcare/backend:/app
      - /app/node_modules
    networks:
      - biomedical-network
    depends_on:
      - timescaledb
      - redis
      - kafka
    restart: unless-stopped

  # ============================================================================
  # FRONTENDS
  # ============================================================================

  ai-diagnostics-frontend:
    build:
      context: ./ai-diagnostics/frontend
      dockerfile: Dockerfile
    container_name: biomedical-ai-diagnostics-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5001
    ports:
      - "3001:3000"
    volumes:
      - ./ai-diagnostics/frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - biomedical-network
    depends_on:
      - ai-diagnostics-backend
    restart: unless-stopped

  medical-imaging-frontend:
    build:
      context: ./medical-imaging-ai/frontend
      dockerfile: Dockerfile
    container_name: biomedical-imaging-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5002
    ports:
      - "3002:3000"
    volumes:
      - ./medical-imaging-ai/frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - biomedical-network
    depends_on:
      - medical-imaging-backend
    restart: unless-stopped

  biosensing-frontend:
    build:
      context: ./biosensing/frontend
      dockerfile: Dockerfile
    container_name: biomedical-biosensing-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5003
    ports:
      - "3003:3000"
    volumes:
      - ./biosensing/frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - biomedical-network
    depends_on:
      - biosensing-backend
    restart: unless-stopped

  hipaa-compliance-frontend:
    build:
      context: ./hipaa-compliance/frontend
      dockerfile: Dockerfile
    container_name: biomedical-hipaa-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5004
    ports:
      - "3004:3000"
    volumes:
      - ./hipaa-compliance/frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - biomedical-network
    depends_on:
      - hipaa-compliance-backend
    restart: unless-stopped

  biotensor-labs-frontend:
    build:
      context: ./biotensor-labs/frontend
      dockerfile: Dockerfile
    container_name: biomedical-biotensor-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5005
    ports:
      - "3005:3000"
    volumes:
      - ./biotensor-labs/frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - biomedical-network
    depends_on:
      - biotensor-labs-backend
    restart: unless-stopped

  mynx-natalcare-frontend:
    build:
      context: ./mynx-natalcare/frontend
      dockerfile: Dockerfile
    container_name: biomedical-mynx-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5006
    ports:
      - "3006:3000"
    volumes:
      - ./mynx-natalcare/frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - biomedical-network
    depends_on:
      - mynx-natalcare-backend
    restart: unless-stopped

  # ============================================================================
  # MONITORING & OBSERVABILITY
  # ============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: biomedical-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - biomedical-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: biomedical-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - biomedical-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # ============================================================================
  # API GATEWAY / LOAD BALANCER
  # ============================================================================

  nginx:
    image: nginx:alpine
    container_name: biomedical-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - biomedical-network
    depends_on:
      - ai-diagnostics-backend
      - medical-imaging-backend
      - biosensing-backend
      - hipaa-compliance-backend
      - biotensor-labs-backend
      - mynx-natalcare-backend
    restart: unless-stopped

networks:
  biomedical-network:
    driver: bridge

volumes:
  timescaledb_data:
  redis_data:
  orthanc_data:
  kafka_data:
  zookeeper_data:
  imaging_models:
  ml_experiments:
  ml_models:
  prometheus_data:
  grafana_data:
